{
   //编辑了项目中的文件保存的时候，根据tsconfig.json中的配置重新生成文件，需要编辑器支持
  "compileOnSave": false,
  //配置编译选项
  "compilerOptions": {
    // 用来指定允许从没有默认导出的模块中默认导入 
    "allowSyntheticDefaultImports": true,
    // 使用js的严格模式,在每一个文件上部声明 use strict
    "alwaysStrict": true,
    // 通过为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性
    "esModuleInterop": true,
    //是否强制代码中使用的模块文件名必须和文件系统中的文件名保持大小写一致
    "forceConsistentCasingInFileNames": true,
    // 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'，在 .tsx 中支持 JSX 
    "jsx": "react",
    // 用于选择模块解析策略，有'node'和'classic'两种类型
    "moduleResolution": "node",
    // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'("ESNext" 是指tc39最新的ES proposed features)
    "module": "esNext",
    // 不生成编译文件，这个一般比较少用,这个build目录下将没有任何文件,但是会进行编译,有错误会抛出
    "noEmit": true,
    // 不允许变量或函数参数具有隐式any类型
    "noImplicitAny": true,
    // 用于检查函数是否有返回值，设为true后，如果函数没有返回值则会提示
    "noImplicitReturns": true,
    // 检测this是否隐式指定, this为any报错
    "noImplicitThis": true,
    // 默认false,是否检测定义了但是没使用的变量
    "noUnusedLocals": true,
    // 用于检查是否有在函数体中没有使用的参数
    "noUnusedParameters": true,
    // null类型检测,const teacher: string = null;会报错
    "strictNullChecks": false,
    // 不实用typescript编译，只进行类型检查，使用babel编译
    "target": "ESNext"
  },
  //指定需要编译文件 否则默认当前目录下除了exclude之外的所有.ts, .d.ts,.tsx 文件
  "include": ["./src/**/*", "./typings/**/*"]
}

